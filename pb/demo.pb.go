// Code generated by protoc-gen-go. DO NOT EDIT.
// source: demo.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type DemoReq struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id"`
}

func (m *DemoReq) Reset()                    { *m = DemoReq{} }
func (m *DemoReq) String() string            { return proto.CompactTextString(m) }
func (*DemoReq) ProtoMessage()               {}
func (*DemoReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *DemoReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DemoRsp struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id"`
}

func (m *DemoRsp) Reset()                    { *m = DemoRsp{} }
func (m *DemoRsp) String() string            { return proto.CompactTextString(m) }
func (*DemoRsp) ProtoMessage()               {}
func (*DemoRsp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *DemoRsp) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*DemoReq)(nil), "pb.DemoReq")
	proto.RegisterType((*DemoRsp)(nil), "pb.DemoRsp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DemoService service

type DemoServiceClient interface {
	Demo(ctx context.Context, in *DemoReq, opts ...grpc.CallOption) (*DemoRsp, error)
}

type demoServiceClient struct {
	cc *grpc.ClientConn
}

func NewDemoServiceClient(cc *grpc.ClientConn) DemoServiceClient {
	return &demoServiceClient{cc}
}

func (c *demoServiceClient) Demo(ctx context.Context, in *DemoReq, opts ...grpc.CallOption) (*DemoRsp, error) {
	out := new(DemoRsp)
	err := grpc.Invoke(ctx, "/pb.DemoService/Demo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DemoService service

type DemoServiceServer interface {
	Demo(context.Context, *DemoReq) (*DemoRsp, error)
}

func RegisterDemoServiceServer(s *grpc.Server, srv DemoServiceServer) {
	s.RegisterService(&_DemoService_serviceDesc, srv)
}

func _DemoService_Demo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DemoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServiceServer).Demo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DemoService/Demo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServiceServer).Demo(ctx, req.(*DemoReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _DemoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.DemoService",
	HandlerType: (*DemoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Demo",
			Handler:    _DemoService_Demo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "demo.proto",
}

func init() { proto.RegisterFile("demo.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 110 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0x49, 0xcd, 0xcd,
	0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x92, 0xe4, 0x62, 0x77, 0x49,
	0xcd, 0xcd, 0x0f, 0x4a, 0x2d, 0x14, 0xe2, 0xe3, 0x62, 0xca, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4,
	0x60, 0x0d, 0x62, 0xca, 0x4c, 0x81, 0x4b, 0x15, 0x17, 0xa0, 0x4b, 0x19, 0xe9, 0x73, 0x71, 0x83,
	0xa4, 0x82, 0x53, 0x8b, 0xca, 0x32, 0x93, 0x53, 0x85, 0x14, 0xb8, 0x58, 0x40, 0x5c, 0x21, 0x6e,
	0xbd, 0x82, 0x24, 0x3d, 0xa8, 0x71, 0x52, 0x08, 0x4e, 0x71, 0x41, 0x12, 0x1b, 0xd8, 0x46, 0x63,
	0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4b, 0x76, 0x5b, 0x82, 0x7f, 0x00, 0x00, 0x00,
}
